{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/dao.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract DAO {\n    function nativeToken() virtual public view returns (address);\n    function newProposal(\n        bytes memory _proposalData,\n        string memory _description,\n        address _recipient,\n        IERC20 _token\n    ) virtual public returns (uint256);\n    function vote(uint256 _proposalId, bool _supportsProposal) virtual public;\n    function executeProposal(uint256 _proposalId) virtual public;\n}\n\ncontract WorkValidation is Ownable {\n    address public employer;\n    address public employee;\n    uint256 public reward;\n    uint256 public deadline;\n    string public taskDescription;\n    bool public completed;\n    bool public cancelled;\n    string public work;\n    string public criteria;\n    DAO public dao;\n    uint256 public proposalId;\n\n    constructor(address _employee, uint256 _reward, uint256 _deadline, string memory _taskDescription) payable {\n        employer = msg.sender;\n        employee = _employee;\n        reward = _reward;\n        deadline = _deadline;\n        taskDescription = _taskDescription;\n        completed = false;\n        cancelled = false;\n    }\n\n    function setDAO(address _daoAddress) public onlyOwner {\n        dao = DAO(_daoAddress);\n    }\n\n    function activateTask(uint256 _reward, string memory _criteria) public payable {\n        reward = _reward;\n        criteria = _criteria;\n        require(msg.value == _reward, \"Amount sent must be equal to the reward\");\n    }\n\n    function completeTask(string memory _work) public {\n        require(msg.sender == employee, \"Only the employee can complete the task\");\n        require(block.timestamp <= deadline, \"Deadline has passed\");\n        require(!cancelled, \"Task has been cancelled\");\n        require(bytes(work).length == 0, \"Task is already marked as completed\");\n\n        work = _work;\n        bytes memory data = abi.encodeWithSignature(\"verifyTask()\");\n        string memory description = \"Verify task completion\";\n        IERC20 token = IERC20(dao.nativeToken());\n        address recipient = address(this);\n        proposalId = dao.newProposal(data, description, recipient, token);\n    }\n\n    function verifyTask() public {\n        require(msg.sender == address(dao), \"Only the DAO can verify the task\");\n        require(bytes(work).length > 0, \"No work has been submitted yet\");\n\n        // perform task verification\n        bool isVerified = true;\n\n        if (isVerified) {\n            completed = true;\n            dao.vote(proposalId, true);\n            dao.executeProposal(proposalId);\n            payable(employee).transfer(reward);\n        } else {\n            dao.vote(proposalId, false);\n        }\n    }\n\n    function cancelTask() public {\n        require(msg.sender == employee, \"Only the employee can cancel the task\");\n        require(!completed, \"Task has already been completed\");\n\n        cancelled = true;\n        payable(employer).transfer(reward);\n    }\n\n    function getWork() public view returns (string memory) {\n        return work;\n    }\n\n    function getCriteria() public view returns (string memory) {\n        return criteria;\n    }\n\n    function voteOnCompletion(bool _supportsProposal) public {\n        require(dao != DAO(address(0)), \"DAO has not been set\");\n        dao.vote(proposalId, _supportsProposal);\n    }\n}"
    },
    "contracts/DaoTask.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DaoTaskContract {\n    address public employer;\n    address public employee;\n    uint256 public reward;\n    uint256 public deadline;\n    string public taskDescription;\n    string public criteria;\n    bool public completed;\n    bool public cancelled;\n    bool public verified;\n    address public daoAddress;\n    uint256 public proposalId;\n    string public submittedCode;\n\n    constructor(address _employee, uint256 _reward, uint256 _deadline, string memory _taskDescription, string memory _criteria, address _daoAddress)  public payable{\n        employer = msg.sender;\n        employee = _employee;\n        reward = _reward;\n        deadline = _deadline;\n        taskDescription = _taskDescription;\n        criteria = _criteria;\n        daoAddress = _daoAddress;\n        completed = false;\n        cancelled = false;\n        verified = false;\n    }\n\n    function activateTask(uint256 _reward) public payable {\n        reward = _reward;\n        require(msg.value == _reward, \"Amount sent must be equal to the reward\");\n    }\n\n    function completeTask(string memory _submittedCode) public {\n        // require(msg.sender == employee, \"Only the employee can complete the task\");\n        require(block.timestamp <= deadline, \"Deadline has passed\");\n        require(!cancelled, \"Task has been cancelled\");\n\n        completed = true;\n        submittedCode = _submittedCode;\n        \n        // Create a proposal on the DAO for the members to vote on the task verification\n         bytes memory proposalData = abi.encodeWithSignature(\"verifyTask(string)\", criteria);\n        DAO dao = DAO(daoAddress);\n        proposalId = dao.newProposal(\n            proposalData,\n            \"Verify task completion\",\n            address(this),\n            reward\n        );\n    }\n    \n\n\n    function cancelTask() public {\n        require(msg.sender == employee, \"Only the employee can cancel the task\");\n        require(!completed, \"Task has already been completed\");\n\n        cancelled = true;\n        payable(employer).transfer(reward);\n    }\n\nfunction executeProposal(uint256 _proposalId, string calldata _code) public {\n        DAO dao = DAO(daoAddress);\n        (uint256 votes, uint256 max) = dao.getVoteResults(_proposalId);\n        require(votes > max / 2, \"Proposal did not pass\");\n\n        require(keccak256(bytes(_code)) == keccak256(bytes(criteria)), \"Code did not match criteria\");\n\n        verified = true;\n        payable(employee).transfer(reward);\n    }\n}\n\ninterface DAO {\n    function newProposal(\n        bytes calldata proposalData,\n        string calldata description,\n        address applicant,\n        uint256 weiAmount\n    ) external returns (uint256);\n\n    function nativeToken() external view returns (address);\n\n    function getVoteResults(uint256 proposalId) external view returns (uint256, uint256);\n}\n\n\n\n// pragma solidity 0.8.8;\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// contract DaoTaskContract {\n//     address public employer;\n//     address public employee;\n//     uint256 public reward;\n//     uint256 public deadline;\n//     string public taskDescription;\n//     string public criteria;\n//     bool public completed;\n//     bool public cancelled;\n//     bool public verified;\n//     address public daoAddress;\n//     uint256 public proposalId;\n\n//     constructor(address _employee, uint256 _reward, uint256 _deadline, string memory _taskDescription, string memory _criteria, address _daoAddress)  public payable{\n//         employer = msg.sender;\n//         employee = _employee;\n//         reward = _reward;\n//         deadline = _deadline;\n//         taskDescription = _taskDescription;\n//         criteria = _criteria;\n//         daoAddress = _daoAddress;\n//         completed = false;\n//         cancelled = false;\n//         verified = false;\n//     }\n\n//     function activateTask(uint256 _reward) public payable {\n//         reward = _reward;\n//         require(msg.value == _reward, \"Amount sent must be equal to the reward\");\n//     }\n\n//     function completeTask() public {\n//         require(msg.sender == employee, \"Only the employee can complete the task\");\n//         require(block.timestamp <= deadline, \"Deadline has passed\");\n//         require(!cancelled, \"Task has been cancelled\");\n\n//         completed = true;\n//     }\n\n//     function verifyTask() public {\n//         require(msg.sender == employer, \"Only the employer can verify the task\");\n//         require(completed, \"Task has not been completed yet\");\n\n//         // Create a proposal on the DAO for the members to vote on the task verification\n//         bytes memory proposalData = abi.encodeWithSignature(\"verifyTask()\");\n//         DAO dao = DAO(daoAddress);\n//         proposalId = dao.newProposal(\n//             proposalData,\n//             \"Verify task completion\",\n//             address(this),\n//             IERC20(dao.nativeToken())\n//         );\n//     }\n\n//     function cancelTask() public {\n//         require(msg.sender == employee, \"Only the employee can cancel the task\");\n//         require(!completed, \"Task has already been completed\");\n\n//         cancelled = true;\n//         payable(employer).transfer(reward);\n//     }\n\n//     function executeProposal() public {\n//         DAO dao = DAO(daoAddress);\n//         (uint256 votes, uint256 max) = dao.getVoteResults(proposalId);\n//         require(votes > max / 2, \"Proposal did not pass\");\n\n//         verified = true;\n//         payable(employee).transfer(reward);\n//     }\n// }\n\n// interface DAO {\n//     function newProposal(\n//         bytes calldata _proposalData,\n//         string calldata _description,\n//         address _applicant,\n//         IERC20 _token\n//     ) external returns (uint256);\n\n//     function nativeToken() external view returns (address);\n\n//     function getVoteResults(uint256 _proposalId) external view returns (uint256, uint256);\n// }"
    },
    "contracts/Projects.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\ncontract ProjectContract {\n    struct Task {\n        address employer;\n        address employee;\n        uint256 reward;\n        uint256 deadline;\n        bool completed;\n        bool cancelled;\n    }\n\n    mapping(uint256 => Task) public tasks;\n    uint256 public taskCounter;\n\n    function createTask(address _employee, uint _reward, uint _deadline) public payable returns(uint256){\n        require(msg.value == _reward, \"Amount sent must be equal to the reward\");\n        tasks[taskCounter] = Task({\n            employer: msg.sender,\n            employee: _employee,\n            reward: _reward,\n            deadline: _deadline,\n            completed: false,\n            cancelled: false\n        });\n        taskCounter++;\n        return taskCounter-1;\n    }\n\n\n    function completeTask(uint256 _taskId) public {\n        Task storage task = tasks[_taskId];\n        require(msg.sender == task.employee, \"Only the employee can complete the task\");\n        require(block.timestamp <= task.deadline, \"Deadline has passed\");\n        require(!task.cancelled, \"Task has been cancelled\");\n        require(!task.completed, \"Task has already been completed\");\n\n        task.completed = true;\n        payable(task.employee).transfer(task.reward);\n    }\n\n    function getReward(uint256 _taskId)public view returns(uint256){\n        Task storage task =  tasks[_taskId];\n        return task.reward;\n    }\n\n    function cancelTask(uint256 _taskId) public {\n        Task storage task = tasks[_taskId];\n        require(msg.sender == task.employee, \"Only the employee can cancel the task\");\n        require(!task.completed, \"Task has already been completed\");\n        require(!task.cancelled, \"Task has been cancelled\");\n        task.cancelled = true;\n        payable(task.employer).transfer(task.reward);\n    }\n}"
    },
    "contracts/Task.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.8;\n\n\n// contract fundme{\n//     uint256 minprice = 50*10e18;\n//     function fund() public payable{\n//         require(msg.value>=minprice,\"dint get enough\");\n//     }\n//     function getversion() public view returns(uint256){\n//         return minprice;\n//     }\n// }\n\n\n\npragma solidity ^0.8.8;\n\ncontract TaskContract {\n    address public employer;\n    address public employee;\n    uint256 public reward;\n    uint256 public deadline;\n    string public taskDescription;\n    bool public completed;\n    bool public cancelled;\n    constructor(address _employee, uint _reward, uint _deadline) payable {\n        employer = msg.sender;\n        employee = _employee;\n        reward = _reward;\n        deadline = _deadline;\n        completed = false;\n        cancelled = false;\n    }\n\n    function activateTask(uint _reward) public payable {\n        reward = _reward;\n        require(msg.value == _reward, \"Amount sent must be equal to the reward\");\n    }\n\n    function completeTask() public {\n        // require(msg.sender == employee, \"Only the employee can complete the task\");\n        require(block.timestamp <= deadline, \"Deadline has passed\");\n        require(!cancelled, \"Task has been cancelled\");\n\n        completed = true;\n        payable(employee).transfer(reward);\n    }\n\n    function cancelTask() public {\n        require(msg.sender == employee, \"Only the employee can cancel the task\");\n        require(!completed, \"Task has already been completed\");\n\n        cancelled = true;\n        payable(employer).transfer(reward);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}