{
  "language": "Solidity",
  "sources": {
    "contracts/Task.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\ncontract TaskContract {\n    address public employer;\n    address public employee;\n    uint256 public reward;\n    uint256 public deadline;\n    string public taskDescription;\n    bool public completed;\n    bool public cancelled;\n    bool public activated;\n    constructor(address _employee, uint _reward, uint _deadline) payable {\n        employer = msg.sender;\n        employee = _employee;\n        reward = _reward;\n        deadline = _deadline;\n        completed = false;\n        cancelled = false;\n        activated = false;\n    }\n\n    function activateTask(uint _reward) public payable {\n        require(msg.value == _reward, \"Amount sent must be equal to the reward\");\n        require(msg.sender == employer, \"Only hirer can activate the task\");\n        require(activated == false, \"Task already activated\");\n        reward = _reward;\n        activated = true;\n    }\n\n    function isCompleted() public view returns(bool){\n        return completed;\n    }\n\n    function viewReward() public view returns(uint256){\n        return reward;\n    }\n\n    function isActivated() public view returns(bool){\n        return activated;\n    }\n\n    function isCancelled() public view returns(bool){\n        return cancelled;\n    }\n\n    function completeTask() public {\n        // require(msg.sender == employee, \"Only the employee can complete the task\");\n        require(block.timestamp <= deadline, \"Deadline has passed\");\n        require(!cancelled, \"Task has been cancelled\");\n\n        completed = true;\n        payable(employee).transfer(reward);\n    }\n\n    function cancelTask() public {\n        require(msg.sender == employee, \"Only the employee can cancel the task\");\n        require(!completed, \"Task has already been completed\");\n\n        cancelled = true;\n        payable(employer).transfer(reward);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}